name: publish

on:
  release:
    types: [published]
  workflow_dispatch: {}   # permet de relancer manuellement

jobs:
  build-and-publish:
    name: Build & Publish to PyPI (OIDC)
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade build toolchain
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Sanity check version match
        run: |
          python - << 'PY'
          import tomllib, pathlib, re
          init = pathlib.Path("src/digitalmeve/__init__.py").read_text(encoding="utf-8")
          m = re.search(r'__version__\s*=\s*[\'"]([^\'"]+)[\'"]', init)
          v_py = m.group(1) if m else None
          with open("pyproject.toml","rb") as f:
            v_toml = tomllib.load(f)["project"]["version"]
          assert v_py == v_toml, f"Version mismatch: __init__={v_py} vs pyproject={v_toml}"
          print("Version OK:", v_py)
          PY

      - name: Determine version & check if exists on PyPI
        id: pypi
        run: |
          python - << 'PY'
          import json, os, re, tomllib, urllib.request
          version = tomllib.load(open("pyproject.toml","rb"))["project"]["version"]
          exists = False
          try:
              with urllib.request.urlopen("https://pypi.org/pypi/digitalmeve/json", timeout=10) as r:
                  data = json.load(r)
              exists = version in set(data.get("releases", {}).keys())
          except Exception:
              exists = False
          print(f"version={version} exists_on_pypi={exists}")
          with open(os.environ["GITHUB_OUTPUT"], "w") as f:
              f.write(f"version={version}\n")
              f.write(f"exists={'true' if exists else 'false'}\n")
          PY

      - name: Build sdist & wheel
        run: python -m build
        if: steps.pypi.outputs.exists == 'false'   # inutile de builder si déjà publié

      - name: Publish to PyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        if: steps.pypi.outputs.exists == 'false'
        with:
          print-hash: true

      - name: Skip publish (already on PyPI)
        if: steps.pypi.outputs.exists == 'true'
        run: |
          echo "Version ${VERSION} already on PyPI – skipping publish."
        env:
          VERSION: ${{ steps.pypi.outputs.version }}
