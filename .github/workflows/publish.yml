name: publish

on:
  release:
    types: [published]

jobs:
  build-and-publish:
    name: Build & Publish to PyPI (OIDC)
    runs-on: ubuntu-latest

    # évite 2 publish en parallèle sur le même ref
    concurrency:
      group: publish-${{ github.ref }}
      cancel-in-progress: true

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade build toolchain
        run: |
          python -m pip install --upgrade pip
          pip install build requests

      - name: Sanity check version match
        run: |
          python - << 'PY'
          import tomllib, pathlib, re
          init = pathlib.Path("src/digitalmeve/__init__.py").read_text(encoding="utf-8")
          m = re.search(r'__version__\s*=\s*[\'"]([^\'"]+)[\'"]', init)
          v_py = m.group(1) if m else None
          with open("pyproject.toml","rb") as f:
            v_toml = tomllib.load(f)["project"]["version"]
          assert v_py == v_toml, f"Version mismatch: __init__={v_py} vs pyproject={v_toml}"
          print("Version OK:", v_py)
          PY

      - name: Check if version already on PyPI
        id: pypi_check
        run: |
          python - << 'PY'
          import json, sys, urllib.request, tomllib, pathlib
          pkg = "digitalmeve"  # <-- nom du package PyPI
          # version locale
          with open("pyproject.toml", "rb") as f:
            v_local = tomllib.load(f)["project"]["version"]
          try:
            data = json.loads(urllib.request.urlopen(f"https://pypi.org/pypi/{pkg}/json").read())
            existing = set(data.get("releases", {}).keys())
          except Exception:
            existing = set()
          print("Local version:", v_local)
          print("Last on PyPI:", sorted(existing)[-5:] if existing else "none")
          skip = "true" if v_local in existing else "false"
          with open("$GITHUB_OUTPUT", "a", encoding="utf-8") as fh:
            fh.write(f"skip_publish={skip}\n")
          PY

      - name: Build sdist & wheel
        if: steps.pypi_check.outputs.skip_publish != 'true'
        run: python -m build

      - name: Publish to PyPI (Trusted Publisher)
        if: steps.pypi_check.outputs.skip_publish != 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

      - name: Skip note
        if: steps.pypi_check.outputs.skip_publish == 'true'
        run: echo "Version already on PyPI — skipping publish."
